package com.rm.translateit.db.model

import android.database.Cursor
import android.database.sqlite.SQLiteStatement

import org.greenrobot.greendao.AbstractDao
import org.greenrobot.greendao.Property
import org.greenrobot.greendao.internal.DaoConfig
import org.greenrobot.greendao.database.Database
import org.greenrobot.greendao.database.DatabaseStatement

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "LANGUAGE".
 */
class LanguageDao : AbstractDao<Language, Long> {

    /**
     * Properties of entity Language.
     * Can be used for QueryBuilder and for referencing column names.
     */
    object Properties {
        val Id = Property(0, Long::class.java, "id", true, "_id")
        val Code = Property(1, String::class.java, "code", false, "CODE")
        val Name = Property(2, String::class.java, "name", false, "NAME")
    }


    constructor(config: DaoConfig) : super(config) {
    }

    constructor(config: DaoConfig, daoSession: DaoSession) : super(config, daoSession) {
    }

    override fun bindValues(stmt: DatabaseStatement, entity: Language) {
        stmt.clearBindings()

        val id = entity.id
        if (id != null) {
            stmt.bindLong(1, id)
        }
        stmt.bindString(2, entity.code)

        val name = entity.name
        if (name != null) {
            stmt.bindString(3, name)
        }
    }

    override fun bindValues(stmt: SQLiteStatement, entity: Language) {
        stmt.clearBindings()

        val id = entity.id
        if (id != null) {
            stmt.bindLong(1, id)
        }
        stmt.bindString(2, entity.code)

        val name = entity.name
        if (name != null) {
            stmt.bindString(3, name)
        }
    }

    public override fun readKey(cursor: Cursor, offset: Int): Long? {
        return if (cursor.isNull(offset + 0)) null else cursor.getLong(offset + 0)
    }

    public override fun readEntity(cursor: Cursor, offset: Int): Language {
        val entity = Language(//
                if (cursor.isNull(offset + 0)) null else cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // code
                if (cursor.isNull(offset + 2)) "" else cursor.getString(offset + 2) // name
        )
        return entity
    }

    public override fun readEntity(cursor: Cursor, entity: Language, offset: Int) {
        entity.id = if (cursor.isNull(offset + 0)) null else cursor.getLong(offset + 0)
        entity.code = cursor.getString(offset + 1)
        entity.name = if (cursor.isNull(offset + 2)) null else cursor.getString(offset + 2)
    }

    override fun updateKeyAfterInsert(entity: Language, rowId: Long): Long {
        entity.id = rowId
        return rowId
    }

    public override fun getKey(entity: Language?): Long? {
        if (entity != null) {
            return entity.id
        } else {
            return null
        }
    }

    public override fun hasKey(entity: Language): Boolean {
        return entity.id != null
    }

    override fun isEntityUpdateable(): Boolean {
        return true
    }

    companion object {

        val TABLENAME = "LANGUAGE"

        /** Creates the underlying database table.  */
        fun createTable(db: Database?, ifNotExists: Boolean) {
            val constraint = if (ifNotExists) "IF NOT EXISTS " else ""
            db!!.execSQL("CREATE TABLE " + constraint + "\"LANGUAGE\" (" + //

                    "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id

                    "\"CODE\" TEXT NOT NULL ," + // 1: code

                    "\"NAME\" TEXT);") // 2: name
        }

        /** Drops the underlying database table.  */
        fun dropTable(db: Database?, ifExists: Boolean) {
            val sql = "DROP TABLE " + (if (ifExists) "IF EXISTS " else "") + "\"LANGUAGE\""
            db!!.execSQL(sql)
        }
    }

}
