apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'idea'

buildscript {
    ext {
        retrofit_version = '2.1.0'
        okhttp3_version = '3.3.0'
        gson_version = '2.7'
        jsoup_version = '1.9.2'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:retrofit-mock:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofit_version"
    compile "com.squareup.okhttp3:logging-interceptor:$okhttp3_version"

    compile "com.google.code.gson:gson:$gson_version"

    compile "io.reactivex:rxjava:$rxjava_version"
    compile "io.reactivex:rxkotlin:$rxkotlin_version"

    compile "org.jsoup:jsoup:$jsoup_version"

    compile "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    testCompile "junit:junit:$junit_version"
    testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile "com.squareup.okhttp3:mockwebserver:$okhttp3_version"
    testCompile "org.junit.platform:junit-platform-runner:$junit_platform_runner_version"
    testCompile "org.mockito:mockito-core:$mockito_version"
    testCompile "org.mockito:mockito-inline:$mockito_version"
}

repositories {
    mavenCentral()
}

idea {
    module {
        excludeDirs -= buildDir
        excludeDirs += file("$buildDir/classes")
        excludeDirs += file("$buildDir/kotlin")
        excludeDirs += file("$buildDir/kotlin-classes")
        excludeDirs += file("$buildDir/libs")
        excludeDirs += file("$buildDir/reports")
        excludeDirs += file("$buildDir/resources")
        excludeDirs += file("$buildDir/test-results")
        excludeDirs += file("$buildDir/tmp")

    }
}

sourceSets.main.java.srcDir file("$buildDir/generated/source/kapt")

//HACK: I don't know why, but resources folder not in classpath, here's workaround to be able to read
//files for unit testing.
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources
//HACKEND

sourceCompatibility = 1.7
targetCompatibility = 1.7